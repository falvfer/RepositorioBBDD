/*1. Creamos la tabla alumnos con la siguiente estructura:
   create DOMAIN d_entero int;
       
   create table alumnos (
    id_alumno d_id generated by DEFAULT as IDENTITY not null,
    nombre d_cadena60 not null,
    origen d_cadena20 not null,
    numero_orden d_entero
   );
   alter table alumnos add constraint pk_alumnos primary key (id_alumno);
       
   El campo origen sólo puede tomar los valores: Málaga, Andalucía,
   España y otros. En base al origen del alumno. Y el campo numero_orden
   va numerando los alumnos según su tipo.*/

create DOMAIN d_entero int;

create table alumnos (
 id_alumno d_id generated by DEFAULT as IDENTITY not null,
 nombre d_cadena60 not null,
 origen d_cadena20 not null,
 numero_orden d_entero
);
alter table alumnos add constraint pk_alumnos primary key (id_alumno);



alter table alumnos
add constraint ck_alumnos_origen
check (origen in ('Málaga', 'Andalucía', 'España', 'otros'));


--Ejemplos para probar
insert into alumnos (nombre, origen) values ('Juan', 'Loja');
commit;


insert into alumnos (nombre, origen) values ('Ana', 'Andalucía');
insert into alumnos (nombre, origen) values ('Enrique', 'Málaga');
insert into alumnos (nombre, origen) values ('Pepe', 'España');

select * from alumnos;

/*2. Insertar un alumno con nombre y origen. Inserta el alumno si el origen es
correcto y calcula el valor numero_orden correspondiente contando los alumnos
que hay de ese origen. Si el origen esta mal devuelve 0 si esta bien el
id_alumno recién insertado.*/
create sequence gen_orden_malaga;
create sequence gen_orden_andalucia;
create sequence gen_orden_espana;
create sequence gen_orden_otros;

set term^;
create or alter procedure insertarAlumno(nombre d_cadena60, origen d_cadena20)
	returns (id_alumno d_id)
as
begin

	if(origen in ('Málaga', 'Andalucía', 'España', 'otros')) then
    begin
    	
    	IF(origen='Málaga') THEN
        BEGIN
    	insert into alumnos( nombre, origen, numero_orden)
        	values (:nombre, :origen, next value for gen_orden_malaga)
            RETURNING id_alumno into id_alumno;
        end
        
        else
        begin
        IF(origen='Andalucía') THEN
        BEGIN
    	insert into alumnos(nombre, origen, numero_orden)
        	    	values (:nombre, :origen,next value for gen_orden_andalucia)
                    RETURNING id_alumno into id_alumno;
        end
        
        ELSE
        begin
        if(origen='España') THEN
        BEGIN
    	insert into alumnos(nombre, origen, numero_orden)
        	    	values (:nombre, :origen,next value for gen_orden_espana)
                    RETURNING id_alumno into id_alumno;
        end
        
        else
        begin
    
    	insert into alumnos(nombre, origen, numero_orden)
        	
        	values (:nombre, :origen,next value for gen_orden_otros)
            RETURNING id_alumno into id_alumno;
        end
        
        end
        
        end
    END
    else
    begin
    	id_alumno=0;
    END

END^
set term;^ 

insert into alumnos (nombre, origen, numero_orden)
 values ('Luis', 'Sevilla', 3);

commit;

select *
	from alumnos;
 
-- no inserta   
execute procedure insertarAlumno('juan', 'Valladolid');

-- inserta en Málaga
execute procedure insertarAlumno('juan', 'Málaga');
commit;
execute procedure insertarAlumno('Luis', 'Málaga');
commit;
-- aNDALUCÍA
execute procedure insertarAlumno('Felipe', 'Andalucía');
commit;
-- otro Malagueño
execute procedure insertarAlumno('Noelia', 'Málaga');
commit;

/*3. Insertar alumnos utilizando el maximo para ir controlando la secuencia */
set term^;
create or alter procedure insertarAlumno2(nombre d_cadena60, origen d_cadena20)
	returns (id_alumno d_id)
as
begin

	if(origen in ('Málaga', 'Andalucía', 'España', 'otros')) then
    begin
    	
    	IF(origen='Málaga') THEN
        BEGIN
    	insert into alumnos( nombre, origen, numero_orden)
        	values (:nombre, :origen, (select COALESCE(MAX(numero_orden), 0) +1 
                                        from alumnos
                                        where origen = 'Málaga'))
            RETURNING id_alumno into id_alumno;
        end
        
        else
        begin
        IF(origen='Andalucía') THEN
        BEGIN
    	insert into alumnos(nombre, origen, numero_orden)
        	    	values (:nombre, :origen,(select COALESCE(MAX(numero_orden), 0) +1 
                                        from alumnos
                                        where origen = 'Andalucía'))
                    RETURNING id_alumno into id_alumno;
        end
        
        ELSE
        begin
        if(origen='España') THEN
        BEGIN
    	insert into alumnos(nombre, origen, numero_orden)
        	    	values (:nombre, :origen, (select COALESCE(MAX(numero_orden), 0) +1 
                                        from alumnos
                                        where origen = 'España'))
                    RETURNING id_alumno into id_alumno;
        end
        
        else
        begin
    
    	insert into alumnos(nombre, origen, numero_orden)
        	
        	values (:nombre, :origen,(select COALESCE(MAX(numero_orden), 0) +1 
                                        from alumnos
                                        where origen = 'otros'))
            RETURNING id_alumno into id_alumno;
        end
        
        end
        
        end
    END
    else
    begin
    	id_alumno=0;
    END

END^
set term;^ 


execute procedure insertarAlumno2('Noemi', 'Málaga');
commit;

Select * from alumnos;

/*4. Hacer el 2 o el 3 lanzando una excepción si el origen es incorrecto.*/
create exception noExisteOrigen 'El campo origen no es válido para la tabla alumnos';


set term^;
create or alter procedure insertarAlumno3(nombre d_cadena60, origen d_cadena20)
	returns (id_alumno d_id)
as
begin

	if(origen not in ('Málaga', 'Andalucía', 'España', 'otros')) then
     exception NOEXISTEORIGEN;
     
    	
    IF(origen='Málaga') THEN
    BEGIN
    insert into alumnos( nombre, origen, numero_orden)
        values (:nombre, :origen, next value for gen_orden_malaga)
        RETURNING id_alumno into id_alumno;
    end
        
    else
    begin
    IF(origen='Andalucía') THEN
    BEGIN
    insert into alumnos(nombre, origen, numero_orden)
                values (:nombre, :origen,next value for gen_orden_andalucia)
                RETURNING id_alumno into id_alumno;
    end
        
    ELSE
    begin
    if(origen='España') THEN
    BEGIN
    insert into alumnos(nombre, origen, numero_orden)
                values (:nombre, :origen,next value for gen_orden_espana)
                RETURNING id_alumno into id_alumno;
    end
        
    else
    begin
    
    insert into alumnos(nombre, origen, numero_orden)
        	
        values (:nombre, :origen,next value for gen_orden_otros)
        RETURNING id_alumno into id_alumno;
    end
        
    end
    end
    
    

END^
set term;^ 

execute Procedure insertarAlumno3 ('Antonio', 'España');

commit;

execute Procedure insertarAlumno3 ('Alonsie', 'Francia');

select * from alumnos;

execute Procedure insertarAlumno3 ('Antonio Jesús', 'otros');

commit;

execute Procedure insertarAlumno3 ('Alonsoff', 'Ruso');

select * from alumnos;




























